// <auto-generated />
using System;
using BeitragRdrDataAccessLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeitragRdrDataAccessLibrary.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230107112744_foreignkeybeitragfaceimage")]
    partial class foreignkeybeitragfaceimage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("BeitragRdr.Models.Beitrag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("beitragInstaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("beitragPintrId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("beitragInstaId");

                    b.HasIndex("beitragPintrId");

                    b.ToTable("Beitrags");
                });

            modelBuilder.Entity("BeitragRdr.Models.BeitragTags", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BeitragId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagId", "BeitragId");

                    b.HasIndex("BeitragId");

                    b.ToTable("BeitragTags");
                });

            modelBuilder.Entity("BeitragRdr.Models.ImageModels.ImageModelFacebook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BeitragFaceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("base64data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeitragFaceId")
                        .IsUnique();

                    b.ToTable("ImageModelFacebook");
                });

            modelBuilder.Entity("BeitragRdr.Models.ImageModels.ImageModelInstagram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BeitragInstaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("base64data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeitragInstaId")
                        .IsUnique();

                    b.ToTable("ImageModelInstagram");
                });

            modelBuilder.Entity("BeitragRdr.Models.ImageModels.ImageModelPintr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BeitragPintrId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("base64data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeitragPintrId")
                        .IsUnique();

                    b.ToTable("ImageModelPintr");
                });

            modelBuilder.Entity("BeitragRdr.Models.SubModels.BeitragFace", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("beitragFaces");
                });

            modelBuilder.Entity("BeitragRdr.Models.SubModels.BeitragInsta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("beitragInstas");
                });

            modelBuilder.Entity("BeitragRdr.Models.SubModels.BeitragPintr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("beitragPintrs");
                });

            modelBuilder.Entity("BeitragRdr.Models.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BeitragRdr.Models.Beitrag", b =>
                {
                    b.HasOne("BeitragRdr.Models.SubModels.BeitragInsta", "beitragInsta")
                        .WithMany()
                        .HasForeignKey("beitragInstaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeitragRdr.Models.SubModels.BeitragPintr", "beitragPintr")
                        .WithMany()
                        .HasForeignKey("beitragPintrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("beitragInsta");

                    b.Navigation("beitragPintr");
                });

            modelBuilder.Entity("BeitragRdr.Models.BeitragTags", b =>
                {
                    b.HasOne("BeitragRdr.Models.Beitrag", "Beitrag")
                        .WithMany("tags")
                        .HasForeignKey("BeitragId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeitragRdr.Models.Tags", "Tags")
                        .WithMany("Beitrags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beitrag");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BeitragRdr.Models.ImageModels.ImageModelFacebook", b =>
                {
                    b.HasOne("BeitragRdr.Models.SubModels.BeitragFace", "BeitragFace")
                        .WithOne("Image")
                        .HasForeignKey("BeitragRdr.Models.ImageModels.ImageModelFacebook", "BeitragFaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeitragFace");
                });

            modelBuilder.Entity("BeitragRdr.Models.ImageModels.ImageModelInstagram", b =>
                {
                    b.HasOne("BeitragRdr.Models.SubModels.BeitragInsta", "BeitragInsta")
                        .WithOne("Image")
                        .HasForeignKey("BeitragRdr.Models.ImageModels.ImageModelInstagram", "BeitragInstaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeitragInsta");
                });

            modelBuilder.Entity("BeitragRdr.Models.ImageModels.ImageModelPintr", b =>
                {
                    b.HasOne("BeitragRdr.Models.SubModels.BeitragPintr", "BeitragPintr")
                        .WithOne("Image")
                        .HasForeignKey("BeitragRdr.Models.ImageModels.ImageModelPintr", "BeitragPintrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeitragPintr");
                });

            modelBuilder.Entity("BeitragRdr.Models.SubModels.BeitragFace", b =>
                {
                    b.HasOne("BeitragRdr.Models.Beitrag", "Beitrag")
                        .WithOne("beitragFace")
                        .HasForeignKey("BeitragRdr.Models.SubModels.BeitragFace", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beitrag");
                });

            modelBuilder.Entity("BeitragRdr.Models.Beitrag", b =>
                {
                    b.Navigation("beitragFace")
                        .IsRequired();

                    b.Navigation("tags");
                });

            modelBuilder.Entity("BeitragRdr.Models.SubModels.BeitragFace", b =>
                {
                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("BeitragRdr.Models.SubModels.BeitragInsta", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("BeitragRdr.Models.SubModels.BeitragPintr", b =>
                {
                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("BeitragRdr.Models.Tags", b =>
                {
                    b.Navigation("Beitrags");
                });
#pragma warning restore 612, 618
        }
    }
}
